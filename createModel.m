function [model] = createModel(compFile, posFile, negFile, columnsToKeep)% get the header from the compensation file[~, header] = fca_readfcs(compFile);% get the compensated positive and negative data from% the other files, using the comp data from the headernegData = reComp(compFile, negFile);posData = reComp(compFile, posFile);% remove columns from both sets and the header[negData, header] = keepColumns(negData, columnsToKeep, header);posData = keepColumns(posData, columnsToKeep);% if either of the sets is relatively huge, use a subset of it insteadnegSize = size(negData, 1);posSize = size(posData, 1);if negSize / posSize > 2  fraction = (posSize*2)/negSize;  negData = splitData(negData, fraction);else if posSize / negSize > 2  fraction = (negSize*2)/posSize;  posData = splitData(posData, fraction);end% train and validate the modellambdaVec = [0, .001, .01, .1, 1, 10, 100, 1000];[train, validate, test] = splitPosNeg(posData, negData);[theta, lambda] = validateLambda(train, validate, lambdaVec);model.theta = theta;model.lambda = lambda;model.columns = columnsToKeep;model.header = header;% print an F1 score for the test set[testX, testY] = separateInputOutput(test);predictions = predict(testX, theta);F1 = Fscore(testY, predictions);fprintf("Test F1 score (closer to 1 is better): %f\n", F1);end